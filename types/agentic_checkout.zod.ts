// Generated by ts-to-zod
import { z } from "zod";

export const orderSchema = z.object({
  id: z.string(),
  checkout_session_id: z.string(),
  permalink_url: z.string(),
});

export const agenticCheckoutSchemaBundleSchema = z.record(
  z.string(),
  z.unknown(),
);

export const addressSchema = z.object({
  name: z.string(),
  line_one: z.string(),
  line_two: z.string().optional(),
  city: z.string(),
  state: z.string(),
  country: z.string(),
  postal_code: z.string(),
});

export const buyerSchema = z.object({
  first_name: z.string(),
  last_name: z.string(),
  email: z.string(),
  phone_number: z.string().optional(),
});

export const itemSchema = z.object({
  id: z.string(),
  quantity: z.number(),
});

export const paymentProviderSchema = z.object({
  provider: z.literal("stripe"),
  supported_payment_methods: z.array(z.literal("card")),
});

export const lineItemSchema = z.object({
  id: z.string(),
  item: itemSchema,
  base_amount: z.number(),
  discount: z.number(),
  subtotal: z.number(),
  tax: z.number(),
  total: z.number(),
});

export const totalSchema = z.object({
  type: z.union([
    z.literal("items_base_amount"),
    z.literal("items_discount"),
    z.literal("subtotal"),
    z.literal("discount"),
    z.literal("fulfillment"),
    z.literal("tax"),
    z.literal("fee"),
    z.literal("total"),
  ]),
  display_text: z.string(),
  amount: z.number(),
});

export const fulfillmentOptionShippingSchema = z.object({
  type: z.literal("shipping"),
  id: z.string(),
  title: z.string(),
  subtitle: z.string().optional(),
  carrier: z.string().optional(),
  earliest_delivery_time: z.string().optional(),
  latest_delivery_time: z.string().optional(),
  subtotal: z.number(),
  tax: z.number(),
  total: z.number(),
});

export const fulfillmentOptionDigitalSchema = z.object({
  type: z.literal("digital"),
  id: z.string(),
  title: z.string(),
  subtitle: z.string().optional(),
  subtotal: z.number(),
  tax: z.number(),
  total: z.number(),
});

export const messageInfoSchema = z.object({
  type: z.literal("info"),
  param: z.string().optional(),
  content_type: z.union([z.literal("plain"), z.literal("markdown")]),
  content: z.string(),
});

export const messageErrorSchema = z.object({
  type: z.literal("error"),
  code: z.union([
    z.literal("missing"),
    z.literal("invalid"),
    z.literal("out_of_stock"),
    z.literal("payment_declined"),
    z.literal("requires_sign_in"),
    z.literal("requires_3ds"),
  ]),
  param: z.string().optional(),
  content_type: z.union([z.literal("plain"), z.literal("markdown")]),
  content: z.string(),
});

export const linkSchema = z.object({
  type: z.union([
    z.literal("terms_of_use"),
    z.literal("privacy_policy"),
    z.literal("seller_shop_policies"),
  ]),
  url: z.string(),
});

export const paymentDataSchema = z.object({
  token: z.string(),
  provider: z.literal("stripe"),
  billing_address: addressSchema.optional(),
});

export const refundSchema = z.object({
  type: z.union([z.literal("store_credit"), z.literal("original_payment")]),
  amount: z.number(),
});

export const checkoutSessionBaseSchema = z.object({
  id: z.string(),
  buyer: buyerSchema.optional(),
  payment_provider: paymentProviderSchema.optional(),
  status: z.union([
    z.literal("not_ready_for_payment"),
    z.literal("ready_for_payment"),
    z.literal("completed"),
    z.literal("canceled"),
    z.literal("in_progress"),
  ]),
  currency: z.string(),
  line_items: z.array(lineItemSchema),
  fulfillment_address: addressSchema.optional(),
  fulfillment_options: z.array(
    z.union([fulfillmentOptionShippingSchema, fulfillmentOptionDigitalSchema]),
  ),
  fulfillment_option_id: z.string().optional(),
  totals: z.array(totalSchema),
  messages: z.array(z.union([messageInfoSchema, messageErrorSchema])),
  links: z.array(linkSchema),
});

export const checkoutSessionCreateRequestSchema = z.object({
  buyer: buyerSchema.optional(),
  items: z.tuple([itemSchema]).rest(itemSchema),
  fulfillment_address: addressSchema.optional(),
});

export const checkoutSessionUpdateRequestSchema = z.object({
  buyer: buyerSchema.optional(),
  items: z.array(itemSchema).optional(),
  fulfillment_address: addressSchema.optional(),
  fulfillment_option_id: z.string().optional(),
});

export const checkoutSessionCompleteRequestSchema = z.object({
  buyer: buyerSchema.optional(),
  payment_data: paymentDataSchema,
});

export const errorSchema = z.object({
  type: z.union([
    z.literal("invalid_request"),
    z.literal("request_not_idempotent"),
    z.literal("processing_error"),
    z.literal("service_unavailable"),
  ]),
  code: z.string(),
  message: z.string(),
  param: z.string().optional(),
});

export const checkoutSessionSchema = checkoutSessionBaseSchema;

export const checkoutSessionWithOrderSchema = checkoutSessionBaseSchema.and(
  z.record(z.string(), z.unknown()).and(
    z.object({
      order: orderSchema,
    }),
  ),
);
